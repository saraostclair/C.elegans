Step-by-Step Summary of My C. elegans Data Analysis

1. Cleared the R Environment
I started by clearing the R workspace using rm(list = ls()) to remove all existing objects and ensure a fresh,
clean environment.

2. Identified Issues with Column Headers
While inspecting the raw data files, I discovered that some CSV files contained misspelled or inconsistent
column headers, such as "aagr_area", "X", "Area", and "worm_ID". These inconsistencies caused extra
columns to appear and led to misaligned data.

3. Checked Which Files Contained Incorrect Columns
To locate the problematic files, I wrote a script to scan the headers of all CSV files in my raw data folder
(data_original) and identify those containing the misspelled or unwanted column names.

4. Organized Data Files into Separate Folders
For clarity and reproducibility, I organized my files into three folders:
- data_original - containing the raw CSV files with header errors
- data_fixed - containing manually corrected CSV files with consistent column names
- dataset_final - the output folder where the cleaned and combined dataset would be saved

5. Combined Corrected CSV Files
I read all the cleaned CSV files from the data_fixed folder and combined them into one large dataframe by
stacking the rows using bind_rows().

6. Saved the Combined Dataset
The combined dataset was saved as celegans_data_final.csv inside the dataset_final folder to keep the data
organized.

7. Renamed the Dataset Object in R
Step-by-Step Summary of My C. elegans Data Analysis
After loading the combined dataset into R, I renamed the dataframe object to celegans_data_final for
consistent reference throughout my analysis.

8. Handled File Path Issues by Using Full Paths
To avoid errors related to working directories, I used full absolute file paths when reading from and writing to
CSV files and ensured folders existed before saving.

9. Data Normalization and Factor Conversion
I converted key variables such as age and treatment into factor types with specified levels. I also added new
normalized columns (norm_aggr_num, norm_aggr_area, norm_IntDen) by dividing aggregation
measurements by the worm area to standardize across samples.

10. Calculated Group Means and Standard Errors
I summarized the normalized data by treatment and age, calculating means and standard errors for each of
the three measures. This summary formed the basis for my plots and statistical testing.

11. Created Summary Plots
I generated bar plots showing the mean normalized aggregate number, area, and fluorescence intensity for
each treatment and age group, including error bars. These visualizations helped communicate differences
and trends across conditions.

12. Ran Two-Way ANOVAs
To test for statistical effects, I conducted separate two-way ANOVAs on each dependent variable. These
models evaluated the main effects of age and treatment, as well as their interaction.

13. Displayed ANOVA Results in Tables
I formatted the ANOVA output into clean, readable tables that showed each term, degrees of freedom, test
statistic, and p-value. This made the results easy to interpret and present.

14. Performed Post Hoc Comparisons
For each significant effect, I ran pairwise comparisons to identify which age groups or treatment conditions
differed significantly. I separated comparisons by treatment within each age, and by age within each
treatment.

15. Created Interaction Plots
To visualize the interactions, I generated grouped bar plots with error bars for each variable. These plots
allowed me to assess whether treatment effects varied by age and vice versa, providing clearer interpretation
of the interaction terms.
